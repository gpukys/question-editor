{"version":3,"sources":["components/Question.js","components/Editor.js","components/JsonEditor.js","App.js","index.js"],"names":["Question","props","useState","data","setData","correctAnswers","setCorrectAnswers","question","tempQuestion","setTempQuestion","isOpen","setIsOpen","useEffect","console","log","handleClose","handleRadioChange","evt","parseInt","target","value","toggleAnswer","val","idx","findIndex","e","filter","isChecked","includes","deleteAnswer","copy","currAns","answers","splice","multiple","length","Fragment","className","onClick","icon","onClose","title","canOutsideClickClose","canEscapeKeyClose","Classes","DIALOG_BODY","alwaysRenderInput","placeholder","onChange","map","i","label","checked","content","intent","Intent","DANGER","selectedValue","name","INPUT","onKeyPress","which","push","labelFor","id","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","PRIMARY","sort","onSaveChanges","Editor","selectedMode","json","tresholdPercentage","numberOfQuestions","maxAttemptsNumber","strictAttemptsMode","questions","parsed","JSON","parse","public","renderedQuestions","res","deleteQuestion","handleFormChange","key","type","disabled","undefined","stringify","JsonEditor","onSubmit","setJson","large","alert","App","setSelectedMode","questionJson","setQuestionJson","handleNavClick","mode","window","confirm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee038b2c.chunk.js","sourcesContent":["import {\r\n  Button,\r\n  Checkbox,\r\n  Classes,\r\n  Dialog,\r\n  EditableText,\r\n  FormGroup,\r\n  Icon,\r\n  Intent,\r\n  Radio,\r\n  RadioGroup,\r\n  Switch,\r\n  Tooltip,\r\n} from '@blueprintjs/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './Question.scss';\r\n\r\nconst Question = (props) => {\r\n  const [data, setData] = useState(props.data || {});\r\n  const [correctAnswers, setCorrectAnswers] = useState(\r\n    props.correctAnswers || []\r\n  );\r\n  const [tempQuestion, setTempQuestion] = useState(data.question || '');\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  useEffect(() => {\r\n    console.log(props);\r\n    setData(props.data);\r\n    setCorrectAnswers(props.correctAnswers);\r\n  }, []);\r\n\r\n  const handleOpen = () => setIsOpen(true);\r\n  const handleClose = () => setIsOpen(false);\r\n\r\n  const saveChanges = () => {\r\n    setCorrectAnswers(correctAnswers.sort());\r\n    data.question = tempQuestion;\r\n    props.onSaveChanges(data, correctAnswers);\r\n    handleClose();\r\n  };\r\n\r\n  const handleRadioChange = (evt) => {\r\n    console.log(evt);\r\n    setCorrectAnswers([parseInt(evt.target.value)]);\r\n  };\r\n\r\n  const handleIsMultipleChange = (evt) => {\r\n    setData({ ...data, multiple: !data.multiple });\r\n    setCorrectAnswers([0]);\r\n  };\r\n\r\n  const renderedAnswers = () => {\r\n    if (!data.multiple) {\r\n      return (\r\n        <div\r\n          onChange={handleRadioChange}\r\n          selectedValue={correctAnswers && correctAnswers[0]}\r\n          className='flex fd-col'\r\n        >\r\n          <label className=\"bp3-label\">Answers</label>\r\n          {data.answers.map((e, i) => (\r\n            <div className='flex fd-row jc-sb ai-base gap-16'>\r\n              <Radio label={e} value={i} name=\"smth\" checked={isChecked(i)} onChange={handleRadioChange}/>\r\n              <Tooltip content={<span>Delete answer</span>}>\r\n                <Button intent={Intent.DANGER} onClick={() => deleteAnswer(i)}>\r\n                  <Icon icon='trash' />\r\n                </Button>\r\n              </Tooltip>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className='m-0'>\r\n          <label className=\"bp3-label\">Answers</label>\r\n          {data.answers.map((e, i) => (\r\n            <div className='flex fd-row jc-sb ai-base gap-16'>\r\n              <Checkbox\r\n                label={e}\r\n                value={i}\r\n                checked={isChecked(i)}\r\n                onChange={toggleAnswer}\r\n              />\r\n              <Tooltip content={<span>Delete answer</span>}>\r\n                <Button intent={Intent.DANGER} onClick={() => deleteAnswer(i)}>\r\n                  <Icon icon='trash' />\r\n                </Button>\r\n              </Tooltip>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const onQuestionEdit = (evt) => {\r\n    setTempQuestion(evt);\r\n  };\r\n\r\n  const toggleAnswer = (evt) => {\r\n    const val = parseInt(evt.target.value);\r\n    const idx = correctAnswers.findIndex((e) => e === val);\r\n    if (idx > -1) {\r\n      setCorrectAnswers(correctAnswers.filter((e) => e !== val));\r\n    } else {\r\n      setCorrectAnswers([...correctAnswers, val]);\r\n    }\r\n  };\r\n\r\n  const isChecked = (idx) => correctAnswers.includes(idx);\r\n  const newAnswerListener = (evt) => {\r\n    if (evt.which === 13 && evt.target.value) {\r\n      const copy = { ...data };\r\n      const idx = copy.answers.push(evt.target.value);\r\n      setData(copy);\r\n      setCorrectAnswers(\r\n        data.multiple ? [...correctAnswers, idx - 1] : [idx - 1]\r\n      );\r\n    }\r\n  };\r\n\r\n  const deleteAnswer = (idx) => {\r\n    const copy = { ...data };\r\n    const currAns = copy.answers[correctAnswers[0]];\r\n    copy.answers.splice(idx, 1);\r\n    setData(copy);\r\n    if (data.multiple) {\r\n      setCorrectAnswers(correctAnswers.filter((e) => e !== idx))\r\n    } else {\r\n      const idx = copy.answers.findIndex(e => e === currAns)\r\n      if (idx > -1) {\r\n        setCorrectAnswers([idx])\r\n      } else if (copy.answers.length > 0) {\r\n        setCorrectAnswers([0])\r\n      } else {\r\n        setCorrectAnswers([])\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className='item' onClick={() => handleOpen()}>\r\n        {data.question}\r\n      </div>\r\n      <Dialog\r\n        icon='info-sign'\r\n        onClose={handleClose}\r\n        title='Edit question'\r\n        isOpen={isOpen}\r\n        canOutsideClickClose={false}\r\n        canEscapeKeyClose={false}\r\n      >\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <h2>\r\n            <EditableText\r\n              alwaysRenderInput={true}\r\n              placeholder='Edit question'\r\n              value={tempQuestion}\r\n              onChange={onQuestionEdit}\r\n              className='full-width'\r\n            />\r\n          </h2>\r\n          {renderedAnswers()}\r\n          <input\r\n            className={`${Classes.INPUT} m-b-16 m-t-16`}\r\n            placeholder='New answer'\r\n            onKeyPress={newAnswerListener}\r\n          ></input>\r\n          <FormGroup label='Multiple?' labelFor='multiple'>\r\n            <Switch\r\n              id='multiple'\r\n              checked={data.multiple}\r\n              onChange={handleIsMultipleChange}\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button intent={Intent.PRIMARY} onClick={saveChanges}>\r\n              Save\r\n            </Button>\r\n            <Button onClick={handleClose}>Close</Button>\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","import { Button, Classes, FormGroup, Icon, InputGroup, Intent, Switch, Tooltip } from '@blueprintjs/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './Editor.scss';\r\nimport Question from './Question';\r\n\r\nconst Editor = ({ selectedMode, json }) => {\r\n  const [data, setData] = useState({\r\n    tresholdPercentage: 75,\r\n    numberOfQuestions: 0,\r\n    maxAttemptsNumber: 3,\r\n    strictAttemptsMode: false,\r\n    questions: [],\r\n    answers: [],\r\n  });\r\n\r\n  const onSaveChanges = (idx) => {\r\n    const fn = (res, correctAnswers) => {\r\n      const copy = { ...data };\r\n      copy.questions[idx] = res;\r\n      copy.answers[idx] = correctAnswers.map((e) => parseInt(e));\r\n      setData(copy);\r\n    };\r\n    return fn;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (json) {\r\n      const parsed = JSON.parse(json);\r\n      setData({ ...parsed.public, answers: parsed.answers });\r\n    }\r\n  }, [json]);\r\n\r\n  const renderedQuestions = data.questions.map((e, i) => {\r\n    return (\r\n      <div className='flex fd-row jc-sb ai-base'>\r\n        <Question\r\n          key={e.question}\r\n          data={e}\r\n          correctAnswers={data.answers[i]}\r\n          onSaveChanges={onSaveChanges(i)}\r\n        ></Question>\r\n        <Tooltip content={<span>Delete question</span>}>\r\n                <Button intent={Intent.DANGER} onClick={() => deleteQuestion(i)}>\r\n                  <Icon icon='trash' />\r\n                </Button>\r\n              </Tooltip>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const deleteQuestion = (idx) => {\r\n    const copy = { ...data };\r\n    copy.questions.splice(idx, 1);\r\n    copy.answers.splice(idx, 1);\r\n    setData(copy);\r\n  };\r\n\r\n  const exportJson = () => {\r\n    const res = {public: {...data, answers: undefined}, answers: data.answers}\r\n    res.public.numberOfQuestions = data.questions.length;\r\n    console.log(JSON.stringify(res));\r\n  }\r\n\r\n  const newQuestionListener = (evt) => {\r\n    if (evt.which === 13 && evt.target.value) {\r\n      const copy = { ...data };\r\n      copy.questions.push({question: evt.target.value, answers: [], multiple: false});\r\n      copy.answers.push([])\r\n      setData(copy);\r\n    }\r\n  };\r\n\r\n  const handleFormChange = (e, key) => {\r\n    if (key !== 'strictAttemptsMode') {\r\n      setData({...data, [key]: parseInt(e.target.value)})\r\n    } else {\r\n      setData({...data, strictAttemptsMode: !data.strictAttemptsMode})\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='flex fd-col ai-center gap-16'>\r\n      <div className='flex fd-row gap-16'>\r\n        <FormGroup label={'Treshold Percentage'} labelFor='treshold'>\r\n          <InputGroup\r\n            id='treshold'\r\n            value={data.tresholdPercentage}\r\n            onChange={(e) => handleFormChange(e, 'tresholdPercentage')}\r\n            type='number'\r\n          />\r\n        </FormGroup>\r\n        <FormGroup label={'No. of Questions'} labelFor='questions'>\r\n          <InputGroup\r\n            id='questions'\r\n            disabled\r\n            value={data.questions.length}\r\n            type='number'\r\n          />\r\n        </FormGroup>\r\n        <FormGroup label={'Max No. of Attempts'} labelFor='attempts'>\r\n          <InputGroup\r\n            id='attempts'\r\n            onChange={(e) => handleFormChange(e, 'maxAttemptsNumber')}\r\n            value={data.maxAttemptsNumber}\r\n            type='number'\r\n          />\r\n        </FormGroup>\r\n        <Tooltip content={data.strictAttemptsMode ? `Must get atleast ${data.tresholdPercentage}% for the score to register` : 'No restriction'}>\r\n        <FormGroup label={'Strict Mode'} labelFor='strict'>\r\n          <Switch id='strict' checked={data.strictAttemptsMode}  onChange={(e) => handleFormChange(e, 'strictAttemptsMode')}/>\r\n        </FormGroup>\r\n        </Tooltip>\r\n      </div>\r\n      <div className='questions'>{renderedQuestions}</div>\r\n      <input\r\n            className={`${Classes.INPUT} m-b-16 m-t-16`}\r\n            placeholder='New question'\r\n            onKeyPress={newQuestionListener}\r\n          ></input>\r\n      <Button intent={Intent.PRIMARY} onClick={exportJson}>\r\n        Export JSON\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React, { useState } from 'react';\r\nimport { Button, Intent, TextArea } from '@blueprintjs/core';\r\nimport './JsonEditor.scss';\r\n\r\nconst JsonEditor = ({onSubmit}) => {\r\n\r\n  const [json, setJson] = useState('');\r\n\r\n  const changeHandler = (evt) => {setJson(evt.target.value)}\r\n  const submitJson = () => {\r\n    try {\r\n      JSON.parse(json);\r\n      onSubmit(json);\r\n    } catch {\r\n      alert('Invalid JSON')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container flex fd-col ai-center\">\r\n      <TextArea\r\n        className=\"main-input\"\r\n        large={true}\r\n        intent={Intent.PRIMARY}\r\n        onChange={changeHandler}\r\n        value={json}\r\n      />\r\n      <Button intent={Intent.PRIMARY} onClick={submitJson}>Save</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JsonEditor;\r\n","import { Button, Intent } from '@blueprintjs/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './App.scss';\r\nimport Editor from './components/Editor';\r\nimport JsonEditor from './components/JsonEditor';\r\n\r\nfunction App() {\r\n  const [selectedMode, setSelectedMode] = useState(1);\r\n  const [questionJson, setQuestionJson] = useState(null);\r\n\r\n  function onJsonSubmit(json) {\r\n    setSelectedMode(1);\r\n    setQuestionJson(json);\r\n  }\r\n\r\n  function handleNavClick(mode) {\r\n    if (!!questionJson) {\r\n      if (!window.confirm('You have unsaved changes. Leave?')) {\r\n        return;\r\n      }\r\n    }\r\n    setQuestionJson(null);\r\n    setSelectedMode(mode);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <header className=\"flex fd-col ai-center\">\r\n      <h1>RS School Question editor</h1>\r\n      <div className=\"control-container flex ai-center\">\r\n        <Button intent={Intent.PRIMARY} onClick={() => handleNavClick(1)}>Create new question set</Button>\r\n        <span>OR</span>\r\n        <Button onClick={() => handleNavClick(2)}>Import JSON</Button>\r\n      </div>\r\n    </header>\r\n    <section className=\"flex fd-col ai-center fg-2\">\r\n    {selectedMode === 1 && <Editor selectedMode={selectedMode} json={questionJson}></Editor>}\r\n    {selectedMode === 2 && <JsonEditor onSubmit={onJsonSubmit}></JsonEditor>}\r\n  </section>\r\n  </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}